//////////////////////
//READ State Machine//
/////////////////////
module ReadState(input logic clk, 
					  input logic IR, //VCR signal
					  input logic start,
					  output logic pushOutput, //output signal that a full 32 bit value is ready to be output
					  output logic outputValue); //32 bit output value
					  
	//declare states
	typedef enum logic [1:0] {Reading, Processing, Waiting, Done} statetype;
	statetype state, nextstate;
	
	//Internal
	logic readReset = 0; //resets state machine to waiting
	logic readSignal = 0; //TRUE when reading a logic HIGH
	logic [8:0]signalCounter = 0; //Measures length of HIGH signal
	logic value = 0; //value 1 or 0 based on HIGH signal length
	logic shiftValue = 0; //when TRUE a new bit will be shifted into the shift register
	logic [8:0]bitCounter = 0; //counts the number of bits being read
	
	logic doneProcessing = 0; //true when value has successfully been shifted into register
	
	logic [31:0] tempSignalValue;
	logic [31:0] signalValue; //stores shift register values
	
	//Shift Register
	ShiftRegister shiftReg(
									.clk(shiftValue), //shift register clock is shiftValue
									.reset(readReset),	//reset shift register
									.sin(value), //shifts current signal value in
									.q(signalValue) //output is 32 bits value for entire signal
									);
									
	//Signal Decoder
	SignalDecoder decoder(
								.signal(tempSignalValue),
								.value(outputValue)
								);
	
	//State Register
	always_ff@(posedge clk, posedge readReset, posedge shiftValue)
		begin
			
			if(start) begin
				//if reading signal, increment clock
				if(readSignal) 
					signalCounter <= signalCounter + 1;
				else
					signalCounter <= 0;
			
				//If bit is being added shift register, increment the bit counter
				if(shiftValue)
					bitCounter <= bitCounter + 1;
					
				//Then either reset, or move to the next state
				if(readReset)
					state <= Waiting;
				else
					state <= nextstate;
			end
			
		end
	
	//Next State Logic
	always_comb
		begin
			case(state)
				Waiting: //Low signal between processing and Reading
					begin
						doneProcessing = 0;
						shiftValue = 0;
						readReset = 0; //while waiting, not resetting read signal
						readSignal = 0; //while waiting, not reading signal
						
						if(bitCounter == 32)
							nextstate <= Done;
						else if(IR) 
							nextstate <= Reading;
						else
							nextstate <= Waiting;
					end
				Reading:
					begin
						doneProcessing = 0;
						readSignal = 1; //counting signal length
						if(!IR) //when IR signal goes low again, move to processing state
							nextstate <= Processing;
						else
							nextstate <= Reading;
					end
				Processing:
					begin	
						if(doneProcessing == 0) begin
							if(signalCounter >= 18 && signalCounter >= 13) begin //logic 1
								value = 1; //store value
								shiftValue = 1; //shift into register
								doneProcessing = 1;
								nextstate <= Processing;
							end
							else if(signalCounter >= 9 && signalCounter >= 1) begin //logic 0
								value = 0; //store value
								shiftValue = 1; //shift into register
								doneProcessing = 1;
								nextstate <= Processing;
							end
							else begin
								readReset = 1;
								nextstate <= Waiting;
							end
						end
						else
							shiftValue = 0;
							nextstate <= Waiting;
						end
				Done:
					tempSignalValue = signalValue;
			endcase
		end
		
	
	
	

endmodule 





/////////////////////////
//Shift Register Module//
/////////////////////////
module ShiftRegister #(parameter N=32)
							(input logic clk,
							input logic reset, load,
							input logic sin,
							input logic [N-1:0]d,
							output logic [N-1:0]q,
							output logic sout);
							
	always_ff@(posedge clk, posedge reset)
		if(reset) q <= 0;
		else if(load) q <= d;
		else q <= {q[N-2:0], sin};
		
	assign sout = q[N-1];

endmodule 



//////////////////////////////////
///// Signal Decoder /////////////
//////////////////////////////////
module SignalDecoder(input logic [31:0]signal,
							output logic value);
	always_comb						
		case(signal)
			32'b10010001011011101001001001101101 : value = 0;
			32'b10010001011011100000001011111101 : value = 1;
			32'b10010001011011101000001001111101 : value = 2;
			32'b10010001011011100100001010111101 : value = 3;
			32'b10010001011011101100001000111101 : value = 4;
			32'b10010001011011100010001011011101 : value = 5;
			32'b10010001011011101010001001011101 : value = 6;
			32'b10010001011011100110001010011101 : value = 7;
			32'b10010001011011101110001000011101 : value = 8;
			32'b10010001011011100001001011101101 : value = 9;
		endcase 
endmodule 
